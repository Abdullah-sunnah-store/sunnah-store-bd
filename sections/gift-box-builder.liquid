<div class="custom-box-section page-width">

  <!-- Step Indicator -->
  <div class="step-indicator">
  <div class="step active" data-step="0">
    <span class="step-number">1</span> <span>Choose Products</span>
  </div>
  <div class="step" data-step="1">
    <span class="step-number">2</span> <span>Choose Gift Box</span>
  </div>
  <div class="step" data-step="2">
    <span class="step-number">3</span> <span>Confirm Box</span>
  </div>
</div>

<div class="custom-gift-box-section">
  
  <!-- Left Side: Filter Sidebar -->
  <div class="filter-sidebar">
    <h3>Filter:</h3>
    
    <!-- Category Filter -->
    <div class="filter-group">
      <h4>Category:</h4>
      <div class="category-list">
        {% for block in section.blocks %}
          {% if block.type == 'collection' %}
            {% assign selected_collection = collections[block.settings.collection] %}
            {% if selected_collection and selected_collection.products.size > 0 %}
              <label class="category-item">
                <input type="checkbox" class="category-checkbox" data-handle="{{ selected_collection.handle }}"> 
                {{ selected_collection.title }}
              </label>
            {% endif %}
          {% endif %}
        {% endfor %}
        <label class="category-item">
          <input type="checkbox" class="category-checkbox" data-handle="all" checked> All Products
        </label>
      </div>
    </div>

    <!-- Availability Filter -->
    <div class="filter-group cmb-Availability">
      <h4>Availability:</h4>
      <div class="availability-list">
        <label class="availability-item">
          <input type="checkbox" id="in-stock" checked> In stock (<span id="in-stock-count">0</span>)
        </label>
        <label class="availability-item">
          <input type="checkbox" id="out-of-stock"> Out of stock (<span id="out-stock-count">0</span>)
        </label>
      </div>
    </div>

    <!-- Price Range Filter -->
    <div class="filter-group cmb-Price">
      <h4>Price:</h4>
      <p class="price-info">The highest price is ৳<span id="max-price">4,750</span></p>
      <div class="price-range">
        <div class="price-inputs">
          <input type="number" id="price-from" placeholder="From" min="0">
          <span>৳</span>
          <input type="number" id="price-to" placeholder="To" min="0">
          <span>৳</span>
        </div>
        <div class="price-slider-container">
          <input type="range" id="price-slider-min" min="0" max="5000" value="0" class="price-slider">
          <input type="range" id="price-slider-max" min="0" max="5000" value="5000" class="price-slider">
        </div>
        <div class="price-display">
          ৳<span id="price-range-display">0 - 4,750</span>
        </div>
      </div>
    </div>
  </div>

  <!-- Right Side: Content Area -->
  <div class="content-area">
    
    <!-- Search + Sort Section -->
    <div class="search-sort-header">
      <div class="custom-search-wrapper">
        <input type="text" id="productSearch" placeholder="Search products..." autocomplete="off">
        <button type="submit" class="search-icon-button" aria-label="Search">
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" width="20" height="20">
            <circle cx="11" cy="11" r="8" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
            <line x1="21" y1="21" x2="16.65" y2="16.65" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
          </svg>
        </button>
        <div id="search-suggestions" class="suggestions-dropdown" style="display: none;"></div>
      </div>

      <select class="cmb-sortOptions" id="sortOptions">
        <option value="title-asc">Default sorting</option>
        <option value="price-asc">Price low to high</option>
        <option value="price-desc">Price high to low</option>
      </select>
    </div>

    <!-- Step Content Sections -->
    <div class="step-content-wrapper">
      
      <!-- Product Grid Step -->
      <div id="product-step" class="step-section">
        <h2>Choose Products</h2>
        <div id="productGrid" class="product-grid">
          {% assign processed_products = '' %}
          {% comment %} Loop through selected collections only {% endcomment %}
          {% for block in section.blocks %}
            {% if block.type == 'collection' %}
              {% assign selected_collection = collections[block.settings.collection] %}
              {% if selected_collection %}
                {% for product in selected_collection.products %}
                 {% if product.available %}
                   {% unless processed_products contains product.id %}
                     {% assign processed_products = processed_products | append: product.id | append: ',' %}
                     
                     {% assign first_available_variant = null %}
                     {% for v in product.variants %}
                       {% if v.available and first_available_variant == null %}
                         {% assign first_available_variant = v %}
                       {% endif %}
                     {% endfor %}

                     {% comment %} Fixed price calculation {% endcomment %}
                     {% assign variant_price = first_available_variant.price | divided_by: 100.0 %}
                     {% assign variant_price_rounded = variant_price | round %}

                     <div class="product-card"
                        data-id="{{ first_available_variant.id }}"
                        data-product-id="{{ product.id }}"
                        data-title="{{ product.title | escape }} - {{ first_available_variant.title }}"
                        data-price="{{ variant_price_rounded }}"
                        data-collection="{{ selected_collection.handle }}"
                        data-options="{{ first_available_variant.options | join: ' / ' }}"
                        data-available="{{ product.available }}">
                   
                       <!-- Updated image element with data attribute for variant image -->
                       <img class="product-main-image" 
                            src="{% if first_available_variant.image %}{{ first_available_variant.image | img_url: '300x' }}{% else %}{{ product.featured_image | img_url: '300x' }}{% endif %}" 
                            alt="{{ product.title }}"
                            data-default-image="{{ product.featured_image | img_url: '300x' }}">
                       <p class="product-title">{{ product.title }}</p>
                       <p class="product-price">৳{{ variant_price_rounded }}</p>
                   
                       {% if product.variants.size > 1 %}
                         {% for option in product.options_with_values %}
                           <div class="variant-values">
                             {% assign option_values = '' %}
                             {% for variant in product.variants %}
                               {% if variant.available %}
                                 {% assign value = variant.options[forloop.parentloop.index0] %}
                                 {% unless option_values contains value %}
                                   {% assign option_values = option_values | append: value | append: ',' %}
                                   {% assign option_price = variant.price | divided_by: 100.0 | round %}
                                   <button class="variant-option-btn {% if variant.id == first_available_variant.id %}active{% endif %}"
                                     data-variant-id="{{ variant.id }}"
                                     data-title="{{ product.title | escape }} - {{ variant.title }}"
                                     data-price="{{ option_price }}"
                                     data-variant-image="{% if variant.image %}{{ variant.image | img_url: '300x' }}{% else %}{{ product.featured_image | img_url: '300x' }}{% endif %}">
                                     {{ value }}
                                   </button>
                                 {% endunless %}
                               {% endif %}
                             {% endfor %}
                           </div>
                         {% endfor %}
                       {% endif %}
                   
                       <button class="add-to-box-btn"
                         data-id="{{ first_available_variant.id }}"
                         data-title="{{ product.title | escape }} - {{ first_available_variant.title }}"
                         data-price="{{ variant_price_rounded }}"
                         data-image="{% if first_available_variant.image %}{{ first_available_variant.image | img_url: '200x' }}{% else %}{{ product.featured_image | img_url: '200x' }}{% endif %}">
                         Add +
                       </button>
                   
                       <div class="cus-quantity-control" style="display: none;">
                         <button class="cus-qty-btn cus-decrease" data-id="{{ first_available_variant.id }}">-</button>
                         <span class="cus-qty">1</span>
                         <button class="cus-qty-btn cus-increase" data-id="{{ first_available_variant.id }}">Add +</button>
                       </div>
                     </div>
                   {% endunless %}
                 {% endif %}
                {% endfor %}
              {% endif %}
            {% endif %}
          {% endfor %}
          
          {% comment %} Always include gift-box collection (hardcoded exception) {% endcomment %}
          {% assign gift_box_collection = collections['gift-box'] %}
          {% if gift_box_collection %}
            {% for product in gift_box_collection.products %}
              {% if product.available %}
                {% unless processed_products contains product.id %}
                  {% assign processed_products = processed_products | append: product.id | append: ',' %}
                  
                  {% assign first_available_variant = null %}
                  {% for v in product.variants %}
                    {% if v.available and first_available_variant == null %}
                      {% assign first_available_variant = v %}
                    {% endif %}
                  {% endfor %}

                  {% assign variant_price = first_available_variant.price | divided_by: 100.0 %}
                  {% assign variant_price_rounded = variant_price | round %}

                  <div class="product-card"
                     data-id="{{ first_available_variant.id }}"
                     data-product-id="{{ product.id }}"
                     data-title="{{ product.title | escape }} - {{ first_available_variant.title }}"
                     data-price="{{ variant_price_rounded }}"
                     data-collection="gift-box"
                     data-options="{{ first_available_variant.options | join: ' / ' }}"
                     data-available="{{ product.available }}"
                     style="display: none;">
                
                    <img class="product-main-image" 
                         src="{% if first_available_variant.image %}{{ first_available_variant.image | img_url: '300x' }}{% else %}{{ product.featured_image | img_url: '300x' }}{% endif %}" 
                         alt="{{ product.title }}"
                         data-default-image="{{ product.featured_image | img_url: '300x' }}">
                    <p class="product-title">{{ product.title }}</p>
                    <p class="product-price">৳{{ variant_price_rounded }}</p>
                
                    <button class="add-to-box-btn"
                      data-id="{{ first_available_variant.id }}"
                      data-title="{{ product.title | escape }} - {{ first_available_variant.title }}"
                      data-price="{{ variant_price_rounded }}"
                      data-image="{% if first_available_variant.image %}{{ first_available_variant.image | img_url: '200x' }}{% else %}{{ product.featured_image | img_url: '200x' }}{% endif %}">
                      Add +
                    </button>
                
                    <div class="cus-quantity-control" style="display: none;">
                      <button class="cus-qty-btn cus-decrease" data-id="{{ first_available_variant.id }}">-</button>
                      <span class="cus-qty">1</span>
                      <button class="cus-qty-btn cus-increase" data-id="{{ first_available_variant.id }}">Add +</button>
                    </div>
                  </div>
                {% endunless %}
              {% endif %}
            {% endfor %}
          {% endif %}
        </div>
      </div>

      <!-- Gift Box Step -->
      <div id="gift-box-step" class="step-section" style="display: none;">
        <h2>CHOOSE YOUR GIFT BOX</h2>
        <div id="giftBoxGrid" class="product-grid">
          {% assign gift_box_collection = collections['gift-box'] %}
          {% for product in gift_box_collection.products %}
            {% assign gift_price = product.price | divided_by: 100.0 | round %}
            <div class="product-card"
               data-id="{{ product.variants.first.id }}"
               data-title="{{ product.title | escape }}"
               data-price="{{ gift_price }}"
               data-collection="gift-box">
      
              <img src="{{ product.featured_image | img_url: '300x' }}" alt="{{ product.title }}">
              <p class="product-title">{{ product.title }}</p>
              <p class="product-price">৳{{ gift_price }}</p>
              <button class="add-to-box-btn"
                data-id="{{ product.variants.first.id }}"
                data-title="{{ product.title | escape }}"
                data-price="{{ gift_price }}"
                data-image="{{ product.featured_image | img_url: '200x' }}">
                Add +
              </button>
              <div class="cus-quantity-control" style="display: none;">
              <button class="cus-qty-btn cus-decrease" data-id="${product.id}">-</button>
              <span class="cus-qty">1</span>
              <button class="cus-qty-btn cus-increase" data-id="${product.id}">Add +</button>
              </div>
            </div>
          {% endfor %}
        </div>
      </div>

      <!-- Confirm Box Step -->
      <div id="confirm-box-step" class="step-section" style="display: none;">
        <h2>CONFIRM YOUR BOX</h2>
        <div id="confirmation-details"></div>
      </div>
    </div>
  </div>

  <!-- Mini Cart (Right Sidebar) -->
  <div class="your-box" id="mini-cart">
    <h3>YOUR BOX (<span id="box-count">0 ITEM</span>)</h3>
    <hr>
    <div id="box-items"></div>
    <p>Total: <span id="box-total" style="font-weight: bold;">৳0</span></p>
    <button id="next-button" class="next-btn" disabled>Next</button>
    <p id="next-alert" style="color: red; font-size: 14px; margin-top: 6px; display: none;">
    Please select at least one product to continue.
    </p>
    <div id="box-items-button">
      <button id="back-button" class="back-btn">Back</button>
      <button id="confirm-button" class="confirm-btn" disabled>Next</button>
    </div>
    <div class="alert-row">
    <p id="confirm-inline-alert" style="color: red; font-size: 14px; display: none;">
        Please select a gift box before continuing.
    </p>
    </div>
    <div id="box-items-button">
    <button id="back-button-2" class="back-btn">Back</button>
    <button id="submit-button" class="confirm-btn">Submit Box</button>
    </div>
  </div>
</div>
</div>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
$(document).ready(function () {
    // ==================== INITIAL SETUP ====================
    $('#next-button, #confirm-button, #back-button, #submit-button, #back-button-2').hide();
    showStep(0);

    let selectedProducts = JSON.parse(localStorage.getItem('selectedProducts')) || [];

    // ==================== FILTER INITIALIZATION ====================
    function initializeFilters() {
        updateAvailabilityCount();
        updateMaxPrice();
        setupPriceSliders();
    }

    function updateAvailabilityCount() {
        const inStockCount = $('.product-card[data-available="true"]:visible').length;
        const outStockCount = $('.product-card[data-available="false"]:visible').length;
        $('#in-stock-count').text(inStockCount);
        $('#out-stock-count').text(outStockCount);
    }

    function updateMaxPrice() {
        let maxPrice = 0;
        $('.product-card').each(function() {
            const price = parseInt($(this).data('price'));
            if (price > maxPrice) {
                maxPrice = price;
            }
        });
        $('#max-price').text(maxPrice.toLocaleString());
        $('#price-slider-max').attr('max', maxPrice).val(maxPrice);
        $('#price-to').attr('max', maxPrice).val(maxPrice);
        $('#price-range-display').text(`0 - ${maxPrice.toLocaleString()}`);
    }

    function setupPriceSliders() {
        const minSlider = document.getElementById('price-slider-min');
        const maxSlider = document.getElementById('price-slider-max');
        const minInput = document.getElementById('price-from');
        const maxInput = document.getElementById('price-to');

        function updatePriceRange() {
            const min = parseInt(minSlider.value);
            const max = parseInt(maxSlider.value);
            
            if (min >= max) {
                minSlider.value = max - 1;
            }
            
            minInput.value = minSlider.value;
            maxInput.value = maxSlider.value;
            $('#price-range-display').text(`${parseInt(minSlider.value).toLocaleString()} - ${parseInt(maxSlider.value).toLocaleString()}`);
            applyAllFilters();
        }

        minSlider.addEventListener('input', updatePriceRange);
        maxSlider.addEventListener('input', updatePriceRange);
        
        minInput.addEventListener('input', function() {
            minSlider.value = this.value;
            updatePriceRange();
        });
        
        maxInput.addEventListener('input', function() {
            maxSlider.value = this.value;
            updatePriceRange();
        });
    }

    // ==================== FILTER EVENT HANDLERS ====================
    $('.category-checkbox').on('change', function() {
        if ($(this).data('handle') === 'all') {
            if ($(this).is(':checked')) {
                $('.category-checkbox').not(this).prop('checked', false);
            }
        } else {
            if ($(this).is(':checked')) {
                $('.category-checkbox[data-handle="all"]').prop('checked', false);
            }
        }
        applyAllFilters();
    });

    $('#in-stock, #out-of-stock').on('change', applyAllFilters);

    // ==================== APPLY FILTERS FUNCTION ====================
    function applyAllFilters() {
        const selectedCategories = [];
        $('.category-checkbox:checked').each(function() {
            selectedCategories.push($(this).data('handle'));
        });

        const showInStock = $('#in-stock').is(':checked');
        const showOutStock = $('#out-of-stock').is(':checked');
        
        const minPrice = parseInt($('#price-slider-min').val()) || 0;
        const maxPrice = parseInt($('#price-slider-max').val()) || 99999;

        $('.product-card').each(function() {
            const $card = $(this);
            const collection = $card.data('collection');
            const price = parseInt($card.data('price'));
            const available = $card.data('available');
            
            // Skip gift-box collection in step 0
            if (collection === 'gift-box' && $('.step.active').data('step') === 0) {
                $card.hide();
                return;
            }

            let showCard = true;

            // Category filter
            if (!selectedCategories.includes('all') && !selectedCategories.includes(collection)) {
                showCard = false;
            }

            // Availability filter
            if (!showInStock && available) showCard = false;
            if (!showOutStock && !available) showCard = false;

            // Price filter
            if (price < minPrice || price > maxPrice) {
                showCard = false;
            }

            $card.toggle(showCard);
        });

        applySearchAndSort();
        updateAvailabilityCount();
    }

    // ==================== UTILITY FUNCTIONS ====================
    // Consistent price parsing function
    function parsePrice(price) {
        if (typeof price === 'string') {
            // Remove currency symbols and parse
            price = price.replace(/[৳$,]/g, '');
        }
        const parsed = parseFloat(price);
        return isNaN(parsed) ? 0 : Math.round(parsed);
    }

    // Format price for display
    function formatPrice(price) {
        const numPrice = parsePrice(price);
        return `৳${numPrice}`;
    }

    // ==================== HELPER FUNCTIONS ====================
    function isProductInCart(variantId) {
        return selectedProducts.some(p => p.id === String(variantId));
    }

    function getProductCountInCart(variantId) {
        return selectedProducts.filter(p => p.id === String(variantId)).length;
    }

    // ==================== UPDATE VARIANT UI STATE ====================
    function updateVariantUIState($card, variantId) {
        const productCount = getProductCountInCart(String(variantId));
        const $qtyControl = $card.find('.cus-quantity-control');
        const $addBtn = $card.find('.add-to-box-btn');
        
        if (productCount > 0) {
            // Variant is in cart, show quantity controls
            $qtyControl.html(`
                <button class="cus-qty-btn cus-decrease" data-id="${variantId}">-</button>
                <span class="cus-qty">${productCount}</span>
                <button class="cus-qty-btn cus-increase" data-id="${variantId}">+</button>
            `);
            $qtyControl.css('display', 'flex');
            $addBtn.hide();
        } else {
            // Variant is not in cart, show add button
            $qtyControl.hide();
            $addBtn.show();
        }
    }

    // ==================== INITIALIZE QUANTITY CONTROLS ON PAGE LOAD ====================
    function initializeQuantityControls() {
        $('.product-card').each(function() {
            const $card = $(this);
            const currentVariantId = $card.data('id');
            updateVariantUIState($card, currentVariantId);
        });
    }

    // ==================== RENDER MINI CART ====================
    function renderMiniCart() {
        let cartContainer = $('#box-items');
        let totalPrice = 0;
        cartContainer.empty();

        selectedProducts.forEach((product, index) => {
            const productPrice = parsePrice(product.price);
            totalPrice += productPrice;

            cartContainer.append(`
                <div class="box-item" data-index="${index}">
                    <img src="${product.image}" alt="${product.title}" />
                    <button class="remove-btn" data-index="${index}">×</button>
                </div>
            `);
        });

        const totalItemCount = selectedProducts.length;
        updateBoxCount(totalItemCount, totalPrice);
        $('#box-total').text(formatPrice(totalPrice));
    }

    function updateBoxCount(count, total) {
        const itemLabel = count === 1 ? 'ITEM' : 'ITEMS';
        if (count === 0) {
            $('#mini-cart h3').html(`YOUR BOX (0 ITEM)`);
        } else {
            $('#mini-cart h3').html(`YOUR BOX (<span id="box-count">${count}</span> ${itemLabel})`);
        }
    }

    // ==================== ADD TO BOX ====================
    $(document).on('click', '.add-to-box-btn', function () {
        const $card = $(this).closest('.product-card');
        const productId = $card.data('product-id');
        
        let product = {
            id: String($(this).data('id')),
            title: $(this).data('title'),
            image: $(this).data('image'),
            price: parsePrice($(this).data('price')),
            collection: $card.data('collection'),
            productId: productId // Add product ID for tracking
        };

        selectedProducts.push(product);
        updateLocalStorageAndUI();
        
        // Update UI state for this variant
        updateVariantUIState($card, product.id);
    });

    // ==================== QUANTITY CONTROLS ====================
    function updateQuantityDisplay(id) {
        const count = selectedProducts.filter(p => p.id === id).length;
        $(`.cus-qty-btn[data-id="${id}"]`).siblings('.cus-qty').text(count);
    }

    $(document).on('click', '.cus-qty-btn.cus-decrease', function () {
        const id = $(this).data('id').toString();

        const index = selectedProducts.findIndex(p => p.id === id);
        if (index !== -1) {
            selectedProducts.splice(index, 1);
            updateLocalStorageAndUI();

            const remaining = selectedProducts.filter(p => p.id === id).length;
            
            // Update UI for all cards that have this variant
            $('.product-card').each(function() {
                const $card = $(this);
                const cardVariantId = $card.data('id');
                if (String(cardVariantId) === String(id)) {
                    updateVariantUIState($card, id);
                }
            });

            if (remaining > 0) {
                updateQuantityDisplay(id);
            }
        }
    });

    $(document).on('click', '.cus-qty-btn.cus-increase', function () {
        const id = $(this).data('id').toString();
        
        const product = selectedProducts.find(p => p.id === id);

        if (product) {
            selectedProducts.push({ ...product });
        } else {
            const $card = $(this).closest('.product-card');
            const productId = $card.data('product-id');

            let newProduct = {
                id: id,
                title: $card.find('.add-to-box-btn').data('title'),
                image: $card.find('.add-to-box-btn').data('image'),
                price: parsePrice($card.find('.add-to-box-btn').data('price')),
                collection: $card.data('collection'),
                productId: productId
            };

            selectedProducts.push(newProduct);
        }

        updateLocalStorageAndUI();
        updateQuantityDisplay(id);
    });

    // ==================== VARIANT SELECTION - FIXED LOGIC ====================
    $(document).on('click', '.variant-option-btn', function () {
        const $btn = $(this);
        const $container = $btn.closest('.variant-values');
        const $card = $btn.closest('.product-card');
        
        // Remove active class from all buttons in this variant group
        $container.find('.variant-option-btn').removeClass('active');
        $btn.addClass('active');
        
        // Get the selected variant data
        const newVariantId = $btn.data('variant-id');
        const newTitle = $btn.data('title');
        const newPrice = parsePrice($btn.data('price'));
        const newVariantImage = $btn.data('variant-image');
        
        // Update the product image
        const $productImage = $card.find('.product-main-image');
        if (newVariantImage) {
            $productImage.attr('src', newVariantImage);
        } else {
            // Fallback to default product image
            const defaultImage = $productImage.data('default-image');
            if (defaultImage) {
                $productImage.attr('src', defaultImage);
            }
        }
        
        // Update the card's data attributes
        $card.attr('data-id', newVariantId);
        $card.attr('data-title', newTitle);
        $card.attr('data-price', newPrice);
        
        // Update the add-to-box button data (including image for cart)
        const cartImageSize = newVariantImage ? newVariantImage.replace('300x', '200x') : $productImage.data('default-image').replace('300x', '200x');
        $card.find('.add-to-box-btn').attr({
            'data-id': newVariantId,
            'data-title': newTitle,
            'data-price': newPrice,
            'data-image': cartImageSize
        });
        
        // Update quantity control buttons
        $card.find('.cus-qty-btn').attr('data-id', newVariantId);
        
        // Update the displayed price
        $card.find('.product-price').text(formatPrice(newPrice));
        
        // Update UI state for the selected variant
        updateVariantUIState($card, newVariantId);
    });

    // ==================== REMOVE ITEM FROM BOX ====================
    $(document).on('click', '.remove-btn', function () {
        let index = $(this).data('index');

        const removedProduct = selectedProducts[index];
        const removedId = removedProduct.id;

        selectedProducts.splice(index, 1);
        updateLocalStorageAndUI();

        // Update UI for all cards that might have this variant
        $('.product-card').each(function() {
            const $card = $(this);
            const cardVariantId = $card.data('id');
            if (String(cardVariantId) === String(removedId)) {
                updateVariantUIState($card, removedId);
            }
        });

        const remaining = selectedProducts.filter(p => p.id === removedId).length;
        if (remaining > 0) {
            updateQuantityDisplay(removedId);
        }

        const hasOnlyGiftBox = selectedProducts.length === 1 && selectedProducts[0].collection === 'gift-box';
        const hasNoProduct = selectedProducts.length === 0;

        if (hasOnlyGiftBox || hasNoProduct) {
            if (hasOnlyGiftBox) {
                selectedProducts = [];
                localStorage.removeItem('selectedProducts');
                renderMiniCart();
                renderConfirmation();
            }
            showStep(0);
            return;
        }

        const currentStep = $('.step-indicator .step.active').index();
        const hasGiftBox = selectedProducts.some(p => p.collection === 'gift-box');
        if (currentStep === 2 && !hasGiftBox) {
            showStep(1);
        }
    });

    // ==================== UPDATE LOCAL STORAGE AND UI ====================
    function updateLocalStorageAndUI() {
        localStorage.setItem('selectedProducts', JSON.stringify(selectedProducts));
        renderMiniCart();
        renderConfirmation();
        updateNextButtonState();
        updateConfirmButtonState();
    }

    // ==================== NEXT BUTTON ====================
    if ($('#next-inline-alert').length === 0) {
        $('#next-button').before(`
            <p id="next-inline-alert" style="color: red; font-size: 14px; margin-bottom: 6px; display: none;">
                Please add at least one product.
            </p>
        `);
    }
    
    $('#next-button').click(function () {
        const hasProduct = selectedProducts.some(p => p.collection !== 'gift-box');
        
        if (!hasProduct) {
            $('#next-inline-alert').fadeIn();

            $('.step-indicator .step').removeClass('active completed');
            $('.step-indicator .step').eq(0).addClass('active');

            $('#product-step').show();
            $('#gift-box-step, #confirm-box-step').hide();

            $('.filter-sidebar').show();
            $('.search-sort-header').show();
            applyAllFilters();
            return;
        }

        $('#next-inline-alert').fadeOut();
        showStep(1);
    });

    // ==================== CONFIRM BUTTON ====================
    if ($('#confirm-inline-alert').length === 0) {
        $('#confirm-button').before(`
            <p id="confirm-inline-alert" style="color: red; font-size: 14px; margin-bottom: 8px; display: none;">
                Please select a gift box.
            </p>
        `);
    }

    $('#confirm-button').click(function () {
        let giftBoxCount = selectedProducts.filter(p => p.collection === 'gift-box').length;

        if (giftBoxCount === 0) {
            $('#confirm-inline-alert')
                .text('Please select a gift box.')
                .stop(true, true).fadeIn();

            setTimeout(() => { $('#confirm-inline-alert').fadeOut(); }, 3000);
            return;
        }

        $('#confirm-inline-alert').hide();
        showStep(2);
        renderConfirmation();
    });

    function updateNextButtonState() {
        const hasProduct = selectedProducts.some(p => p.collection !== 'gift-box');
        $('#next-button').prop('disabled', !hasProduct);
    }
    
    function updateConfirmButtonState() {
        const giftBoxCount = selectedProducts.filter(p => p.collection === 'gift-box').length;
        const isValidGiftBoxSelection = giftBoxCount >= 1;
        $('#confirm-button').prop('disabled', !isValidGiftBoxSelection);
    }

    // ==================== BACK BUTTONS ====================
    $('#back-button').click(() => {
        showStep(0);
    });
    
    $('#back-button-2').click(() => showStep(1));

    // ==================== SUBMIT BUTTON ====================
    $('#submit-button').click(function () {
        if (selectedProducts.length === 0) {
            alert('Your box is empty!');
            return;
        }

        let formData = selectedProducts.map(product => ({
            id: product.id,
            quantity: 1
        }));

        $.getJSON('/cart.js', function (cart) {
            let existingBoxNumbers = [];

            cart.items.forEach(item => {
                const boxName = item.properties && item.properties.box_name;
                if (boxName && boxName.startsWith('Box-item')) {
                    const number = parseInt(boxName.replace('Box-item ', ''));
                    if (!isNaN(number)) existingBoxNumbers.push(number);
                }
            });

            const nextBoxNumber = existingBoxNumbers.length > 0
                ? Math.max(...existingBoxNumbers) + 1
                : 1;

            const boxName = `Box-item ${nextBoxNumber}`;
            const updatedFormData = formData.map(item => ({
                ...item,
                properties: {
                    box_name: boxName
                }
            }));

            console.log("📦 Sending to cart:", JSON.stringify({ items: updatedFormData }, null, 2));

            $.ajax({
                type: 'POST',
                url: '/cart/add.js',
                data: JSON.stringify({ items: updatedFormData }),
                contentType: 'application/json',
                dataType: 'json',
                success: function () {
                    localStorage.removeItem('selectedProducts');
                    window.location.href = '/cart';
                },
                error: function (err) {
                    console.error('Error adding to cart:', err.responseText || err);
                    alert('Something went wrong. Please try again.');
                }
            });
        }).fail(function(err) {
            console.error('Error getting cart:', err);
            alert('Something went wrong. Please try again.');
        });
    });

    // ==================== CONFIRMATION RENDER ====================
    function renderConfirmation() {
        const container = $('#confirmation-details');
        container.empty();

        const grouped = {};
        selectedProducts.forEach(product => {
            if (!grouped[product.id]) {
                grouped[product.id] = { ...product, quantity: 1 };
            } else {
                grouped[product.id].quantity += 1;
            }
        });

        Object.values(grouped).forEach(product => {
            const unitPrice = parsePrice(product.price);
            const totalPrice = unitPrice * product.quantity;
            
            container.append(`
                <div class="box-item" data-id="${product.id}">
                    <div class="cus-product-image-wrapper">
                        <img src="${product.image}" alt="${product.title}" />
                        <div class="quantity-control">
                            <span class="qty">${product.quantity}</span>
                        </div>
                    </div>
                    <span>${product.title}</span>
                    <span>${formatPrice(totalPrice)}</span>
                </div>
            `);
        });
    }

    // ==================== PROGRESS BAR ====================
    function updateProgressBar(stepIndex) {
        let percent = stepIndex === 0 ? 33 : stepIndex === 1 ? 66 : 100;
        if ($('#progress-fill').length) {
            $('#progress-fill').css('width', percent + '%');
        }
    }

    // ==================== STEP CONTROL ====================
    function showStep(stepIndex) {
        $('.step-section').hide();

        $('html, body').animate({ scrollTop: 0 }, 400);

        $('.step-indicator .step')
            .removeClass('active completed')
            .each(function (index) {
                if (index < stepIndex) $(this).addClass('completed');
                if (index === stepIndex) $(this).addClass('active');
            });

        $('#next-button, #confirm-button, #back-button, #submit-button, #back-button-2').hide();

        if (stepIndex === 0) {
            $('#product-step').show();
            $('#next-button').show();
            $('.filter-sidebar').show();
            $('.search-sort-header').show();
            applyAllFilters();
        }

        if (stepIndex === 1) {
            $('#gift-box-step').show();
            $('.filter-sidebar').hide();
            $('.search-sort-header').hide();
            $('.product-card').each(function () {
                const collection = $(this).data('collection');
                $(this).toggle(collection === 'gift-box');
            });
            $('#back-button, #confirm-button').show();
        }

        if (stepIndex === 2) {
            $('#back-button-2').show();
            $('#confirm-box-step').show();
            $('#submit-button').show();
            $('.filter-sidebar').hide();
            $('.search-sort-header').hide();
        }

        updateProgressBar(stepIndex);
    }

    // ==================== STEP INDICATOR CLICK ====================
    $(document).on('click', '.step-indicator .step', function () {
        const clickedStep = parseInt($(this).data('step'));
        const currentStep = $('.step-indicator .step.active').index();
        if (clickedStep < currentStep) showStep(clickedStep);
    });

    // ==================== SEARCH & SORT ====================
    $('#productSearch').on('input', applySearchAndSort);
    $('#sortOptions').on('change', applySearchAndSort);

    function applySearchAndSort() {
        let searchQuery = $('#productSearch').val().toLowerCase();
        let sortOption = $('#sortOptions').val();

        let $products = $('.product-card:visible').sort(function (a, b) {
            let priceA = parsePrice($(a).data('price'));
            let priceB = parsePrice($(b).data('price'));
            let titleA = $(a).data('title').toLowerCase();
            let titleB = $(b).data('title').toLowerCase();

            if (sortOption === 'price-asc') return priceA - priceB;
            if (sortOption === 'price-desc') return priceB - priceA;
            if (sortOption === 'title-asc') return titleA.localeCompare(titleB);
            return 0;
        });

        $products.each(function () {
            let title = $(this).data('title').toLowerCase();
            $(this).toggle(title.includes(searchQuery));
        });

        $('#productGrid').append($products);
    }

    // ==================== SEARCH SUGGESTIONS ====================
    const productSearch = document.getElementById('productSearch');
    const suggestionsBox = document.getElementById('search-suggestions');

    if (productSearch && suggestionsBox) {
        const productCards = document.querySelectorAll('#productGrid .product-card');
        const productData = Array.from(productCards).map(card => ({
            title: card.querySelector('.product-title')?.textContent?.trim(),
            id: card.getAttribute('data-id')
        })).filter(item => item.title && item.id);

        productSearch.addEventListener('input', function () {
            const query = this.value.toLowerCase().trim();
            suggestionsBox.innerHTML = '';

            if (query.length < 2) {
                suggestionsBox.style.display = 'none';
                return;
            }

            const matches = productData.filter(p => p.title.toLowerCase().includes(query)).slice(0, 6);

            if (matches.length === 0) {
                suggestionsBox.style.display = 'none';
                return;
            }

            matches.forEach(match => {
                const div = document.createElement('div');
                div.textContent = match.title;
                div.dataset.id = match.id;
                div.addEventListener('click', () => {
                    productSearch.value = match.title;
                    suggestionsBox.style.display = 'none';
                    filterProductCards(match.title);
                });
                suggestionsBox.appendChild(div);
            });

            suggestionsBox.style.display = 'block';
        });

        document.addEventListener('click', (e) => {
            if (!e.target.closest('.custom-search-wrapper')) {
                suggestionsBox.style.display = 'none';
            }
        });
    }

    function filterProductCards(query) {
        const cards = document.querySelectorAll('#productGrid .product-card');
        cards.forEach(card => {
            const title = card.querySelector('.product-title')?.textContent?.toLowerCase();
            card.style.display = title && title.includes(query.toLowerCase()) ? 'block' : 'none';
        });
    }

    // ==================== INITIALIZE ON LOAD ====================
    renderMiniCart();
    updateNextButtonState();
    updateConfirmButtonState();
    initializeFilters();
    
    setTimeout(() => {
        $('#sortOptions').val('title-asc');
        applyAllFilters();
        initializeQuantityControls();
    }, 100);
});
</script>

<style>
/* General Box Section */
.custom-gift-box-section {
  padding: 20px;
  position: relative;
  display: flex;
  flex-wrap: nowrap;
  gap: 20px;
  justify-content: space-between;
  margin-bottom: 20px;
}

/* Main Page Title */
.main-page-title.page-title.h0.scroll-trigger.animate--fade-in {
  margin: 0;
  font-family: 'Garet', sans-serif !important;
  font-weight: bold;
  text-align: center;
}

/* Filter Sidebar Styles */
.filter-sidebar {
  width: 250px;
  background: #f8f9fa;
  border: 1px solid #e9ecef;
  border-radius: 8px;
  padding: 20px;
  position: sticky;
  top: 70px;
  height: fit-content;
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.filter-sidebar h3 {
  margin: 0 0 20px 0;
  font-size: 18px;
  font-weight: 600;
  color: #333;
  border-bottom: 1px solid #e9ecef;
  padding-bottom: 10px;
}

.filter-group {
  margin-bottom: 25px;
}

.filter-group h4 {
  margin: 0 0 12px 0;
  font-size: 16px;
  font-weight: 600;
  color: #495057;
}

/* Category Filter */
.category-list {
  display: flex;
  flex-direction: column;
  gap: 8px;
  max-height: 300px;
  overflow: scroll;
}

.category-item {
  display: flex;
  align-items: center;
  cursor: pointer;
  font-size: 14px;
  color: #495057;
  padding: 2px 0;
}

.category-item input[type="checkbox"] {
  margin-right: 8px;
  transform: scale(1.1);
}

.category-item:hover {
  color: #000;
}

/* Availability Filter */
.availability-list {
  display: flex;
  flex-direction: column;
  gap: 8px;
}

.availability-item {
  display: flex;
  align-items: center;
  cursor: pointer;
  font-size: 14px;
  color: #495057;
  padding: 2px 0;
}

.availability-item input[type="checkbox"] {
  margin-right: 8px;
  transform: scale(1.1);
}

.availability-item:hover {
  color: #000;
}

/* Price Filter */
.price-info {
  font-size: 13px;
  color: #6c757d;
  margin-bottom: 15px;
}

.price-inputs {
  display: flex;
  align-items: center;
  gap: 8px;
  margin-bottom: 15px;
}

.price-inputs input {
  width: 80px;
  padding: 8px;
  border: 1px solid #ced4da;
  border-radius: 4px;
  font-size: 14px;
}

.price-inputs span {
  font-size: 14px;
  color: #495057;
}

.price-slider-container {
  position: relative;
  height: 20px;
  margin-bottom: 10px;
}

.price-slider {
  position: absolute;
  width: 100%;
  height: 5px;
  border-radius: 5px;
  background: #ddd;
  outline: none;
  -webkit-appearance: none;
  appearance: none;
}

.price-slider::-webkit-slider-thumb {
  -webkit-appearance: none;
  appearance: none;
  width: 20px;
  height: 20px;
  border-radius: 50%;
  background: #000;
  cursor: pointer;
}

.price-slider::-moz-range-thumb {
  width: 20px;
  height: 20px;
  border-radius: 50%;
  background: #000;
  cursor: pointer;
  border: none;
}

.price-display {
  text-align: center;
  font-size: 14px;
  font-weight: 600;
  color: #495057;
}

/* Content Area */
.content-area {
  flex: 1;
  margin-left: 0;
}

.search-sort-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 20px;
  gap: 15px;
}

/* Custom Search Wrapper */
.custom-search-wrapper {
  position: relative;
  flex: 1;
}

#productSearch {
  padding: 10px 40px 10px 12px;
  width: 100%;
  border: 1px solid #ccc;
  border-radius: 6px;
  font-size: 14px;
  box-sizing: border-box;
}

.search-icon-button {
  position: absolute;
  top: 50%;
  right: 12px;
  transform: translateY(-50%);
  background: transparent;
  border: none;
  padding: 0;
  cursor: pointer;
  height: 20px;
  width: 20px;
  display: flex;
  align-items: center;
  justify-content: center;
}

.search-icon-button svg {
  width: 18px;
  height: 18px;
  stroke: #666;
  transition: stroke 0.2s ease;
}

.search-icon-button:hover svg {
  stroke: #000;
}

.suggestions-dropdown {
  position: absolute;
  top: 100%;
  left: 0;
  width: 100%;
  background: #fff;
  border: 1px solid #ddd;
  border-top: none;
  z-index: 10;
  max-height: 200px;
  overflow-y: auto;
  border-radius: 0 0 6px 6px;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.06);
}

.suggestions-dropdown div {
  padding: 8px 12px;
  cursor: pointer;
  font-size: 14px;
}

.suggestions-dropdown div:hover {
  background-color: #f8f9fa;
}

.search-sort-header input,
.search-sort-header select {
  padding: 10px;
  border-radius: 6px;
  border: 1px solid #ccc;
  background: #fff;
  width: 32%;
}

/* Step Indicator */
.step-indicator {
  display: flex;
  justify-content: space-between;
  align-items: flex-start;
  gap: 1rem;
  position: relative;
  width: 50vw;
  margin: 0 auto;
  padding-bottom: 50px;
}

.step {
  display: flex;
  flex-direction: column;
  align-items: center;
  text-align: center;
  position: relative;
  flex: 1;
  font-family: sans-serif;
  color: #9ca3af;
  cursor: pointer;
}

.step:not(:last-child)::after {
  content: "";
  position: absolute;
  top: 16px;
  left: 50%;
  width: 100%;
  height: 2px;
  transform: translateX(0%);
  border-top: 2px dotted #d1d5db;
  z-index: 0;
}

.step-indicator .step-number {
  border-radius: 50%;
  padding: 5px 15px;
  border: 1px solid #aaa;
  z-index: 1;
  background: #fff;
}

.step-number {
  width: 32px;
  height: 32px;
  border-radius: 50%;
  background-color: #e5e7eb;
  color: #374151;
  display: flex;
  align-items: center;
  justify-content: center;
  font-weight: 600;
  z-index: 1;
  font-size: 14px;
}

.step.completed .step-number,
.step.active .step-number {
  background-color: #000;
  color: white;
  border-radius: 50%;
  padding: 5px 15px;
  border: #000;
}

.step span:last-child {
  margin-top: 6px;
  font-size: 14px;
}

.step.completed span:last-child,
.step.active span:last-child {
  font-weight: 600;
  color: #000;
}

.step.completed:not(:last-child)::after {
  border-top: 2px solid #000;
}

.step::after {
  transition: border-top-color 0.4s ease;
}

.step-content-wrapper {
  width: 100%;
}

/* Product Grid */
.product-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
  gap: 15px;
}

/* Product Card with Same Size */
.product-card {
  background: #fff;
  border: 1px solid #ddd;
  padding: 15px;
  text-align: center;
  border-radius: 8px;
  box-sizing: border-box;
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  transition: box-shadow 0.2s ease;
}

.product-card:hover {
  box-shadow: 0 4px 12px rgba(0,0,0,0.1);
}

.product-card img {
  width: 100%;
  height: 180px;
  object-fit: cover;
  border-radius: 6px;
  margin-bottom: 10px;
}

.product-card p {
  display: -webkit-box;
  -webkit-line-clamp: 2;
  -webkit-box-orient: vertical;
  overflow: hidden;
  text-overflow: ellipsis;
  text-align: center;
  max-height: calc(1.2em * 2);
  line-height: 1.2em;
}

.product-title {
  font-weight: 600;
  margin: 8px 0;
  color: #000;
}

.product-price {
  font-size: 16px;
  font-weight: 600;
  color: #000;
  margin-bottom: 10px;
}

/* Variant Options */
.variant-values {
  display: flex;
  gap: 8px;
  margin-bottom: 10px;
  justify-content: center;
  flex-wrap: wrap;
}

.variant-option-btn {
  padding: 6px 14px;
  border: 1px solid #ccc;
  border-radius: 9999px;
  background: white;
  color: #333;
  cursor: pointer;
  font-size: 14px;
  transition: 0.2s ease;
}

.variant-option-btn.active,
.variant-option-btn:hover {
  background: #000;
  color: white;
  border: 1px solid #ccc;
}

/* Quantity Controls */
.cus-product-image-wrapper {
  position: relative;
}

.quantity-control {
  position: absolute;
  top: -2px;
  right: -9px;
  line-height: 0;
}

span.qty {
  padding: 2px 6px;
  background-color: #bdbdbd;
  border-radius: 50%;
}

.cus-quantity-control {
  display: flex;
  align-items: center;
  justify-content: space-around;
  gap: 16px;
  border: 1px solid #000;
  border-radius: 5px;
  padding: 4px 0px;
  width: 100%;
  font-size: 14px;
  margin-top: 8px;
  color: #000;
}

.cus-quantity-control button {
  background: transparent;
  border: none;
  font-size: 20px;
  font-weight: bold;
  cursor: pointer;
  color: #000;
}

.cus-qty {
  min-width: 20px;
  text-align: center;
}

/* Add to Box Button */
.add-to-box-btn {
  position: relative;
  background: transparent;
  color: #000;
  font-size: 18px;
  font-weight: 600;
  border: 1px solid #e1e1e1;
  border-radius: 6px;
  cursor: pointer;
  overflow: hidden;
  transition: all 0.3s ease;
  z-index: 0;
  padding: 12px 0;
}

.add-to-box-btn::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  width: 150%;
  height: 100%;
  background: linear-gradient(90deg, rgba(255, 255, 255, 0) 50%, rgba(255, 255, 255, 0.4) 70%, rgba(255, 255, 255, 0) 80%);
  transform: translateX(-100%);
  z-index: 1;
  pointer-events: none;
}

.add-to-box-btn:hover::before {
  animation: smooth-shine 2s ease-in-out infinite;
}

.add-to-box-btn:hover {
  color: #fff;
  background: #000;
  border-color: #000;
}

.add-to-box-btn > * {
  position: relative;
  z-index: 2;
}

@keyframes smooth-shine {
  0% { transform: translateX(-100%); }
  50% { transform: translateX(100%); }
  100% { transform: translateX(100%); }
}

/* Mini Cart (Right Sidebar) */
.your-box {
  position: sticky;
  top: 70px;
  width: 350px;
  background: #fff;
  border: 1px solid #ddd;
  padding: 15px;
  border-radius: 8px;
  z-index: 3;
  box-shadow: 0px 2px 10px rgba(0, 0, 0, 0.1);
  transition: top 0.3s ease;
  height: fit-content;
}

.your-box h3 {
  margin: 0 0 10px 0;
  font-size: 18px;
  font-weight: 600;
  color: #000;
}

.your-box hr {
  margin: 10px 0;
}

.your-box p {
  display: flex;
  justify-content: space-between;
  color: #000;
}

/* Box Item */
.box-item {
  display: flex;
  align-items: center;
  margin-bottom: 12px;
  padding: 10px;
  border-radius: 6px;
  position: relative;
  justify-content: space-between;
  gap: 10px;
}

.box-item img {
  width: 75px;
  height: 75px;
  object-fit: cover;
  border-radius: 4px;
}

.box-item span {
  flex: 1;
  font-size: 14px;
  color: #000;
}

.box-item span:last-child {
  font-weight: 600;
  text-align: right;
  white-space: nowrap;
}

/* Remove Button */
.remove-btn {
  background: #fff;
  border: none;
  font-size: 16px;
  color: #e74c3c;
  cursor: pointer;
  position: absolute;
  border-radius: 50%;
  top: 0px;
  right: 0px;
  border: 1px solid #ddd;
  width: 24px;
  height: 24px;
  display: flex;
  align-items: center;
  justify-content: center;
}

/* Button Styles */
#back-button, #confirm-button, #submit-button, #back-button-2 {
  display: none;
}

.next-btn:disabled,
.confirm-btn:disabled,
.back-btn:disabled,
#submit-button:disabled,
#next-button:disabled,
#confirm-button:disabled {
  opacity: 0.5;
  background-color: #ccc !important;
  color: #888 !important;
  cursor: not-allowed !important;
  pointer-events: none;
  border-color: #aaa !important;
}

.next-btn,
.confirm-btn,
.back-btn,
#submit-button {
  width: 100%;
  background-color: #000;
  color: #fff;
  padding: 12px 16px;
  border: none;
  border-radius: 6px;
  cursor: pointer;
  transition: background-color 0.3s ease;
  border: 1px solid #000;
  font-size: 16px;
  font-weight: 600;
}

.next-btn:hover,
.confirm-btn:hover,
.back-btn:hover,
#submit-button:hover {
  background-color: #333;
}

/* Button Container */
div#box-items-button {
  display: flex;
  gap: 10px;
  flex-direction: row;
  margin-top: 10px;
}

div#box-items {
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
  gap: 10px;
}

.alert-row {
  margin-top: 10px;
}

/* Confirmation Details Section */
#confirmation-details {
  display: flex;
  flex-direction: column;
  gap: 12px;
  margin-top: 20px;
}

/* Step Headers */
#gift-box-step h2,
.step-section h2,
.step-content-wrapper h2 {
  margin-top: 0 !important;
  transform: translateY(0px) !important;
  font-family: 'Garet', sans-serif !important;
  font-weight: bold;
  margin-bottom: 20px;
}

.your-customize-box .page-width--narrow {
  text-align: center;
}

.qty-btn:disabled {
  opacity: 0.4;
  cursor: not-allowed;
}
.cmb-Price, .cmb-Availability, .cmb-sortOptions{
    display: block;
  }

/* Mobile Responsive Styles */
@media (max-width: 1200px) {
  .cmb-Price, .cmb-Availability, .cmb-sortOptions{
    display: none;
  }
  .custom-gift-box-section {
    flex-direction: column;
  }
  
  .filter-sidebar {
    width: 100%;
    position: relative;
    top: 0;
    margin-bottom: 20px;
  }
  
  .content-area {
    margin-left: 0;
  }
  
  .your-box {
    position: fixed;
    width: 100%;
    bottom: 0;
    left: 0;
    top: unset;
    height: fit-content;
    background: rgb(255, 255, 255);
    border: 1px solid #ddd;
    padding: 15px;
    border-radius: 8px;
    z-index: 1;
    box-shadow: 0px 2px 10px rgba(0, 0, 0, 0.1);
  }

  .step-indicator {
    width: 100vw;
  }

  div#box-items {
    display: flex;
    flex-direction: row;
    flex-wrap: nowrap;
    gap: 10px;
    overflow: auto;
  }
}

@media (max-width: 768px) {
  .step-indicator {
    text-align: center;
    gap: 10px;
    align-items: unset !important;
    width: 95vw;
  }

  .custom-gift-box-section {
    flex-direction: column;
    align-items: center;
    padding: 10px;
    display: block;
  }

  .search-sort-header {
    flex-direction: column;
    gap: 10px;
  }

  .product-grid {
    grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
  }

  .product-card {
    max-width: 100%;
  }

  .product-card img {
    height: auto;
    max-height: 180px;
  }

  .step-indicator {
    text-align: center;
    align-items: center;
    gap: 10px;
  }

  #confirmation-details .box-item {
    align-items: flex-start;
  }

  .box-item {
    flex-direction: row;
  }

  .box-item img {
    width: 40px;
    height: 40px;
  }

  .box-item span {
    flex: unset;
    width: 100%;
    text-align: left;
  }

  .remove-btn {
    top: 0px;
    right: 0px;
  }

  .custom-search-wrapper {
    width: 100% !important;
  }
}

@media (min-width: 769px) and (max-width: 991px) {
  .custom-gift-box-section {
    display: block !important;
  }
}

@media (min-width: 1360px) {
  .back-btn {
    display: none !important;
  }
}
</style>

{% schema %}
{
  "name": "Custom Gift Box",
  "tag": "section",
  "class": "section",
  "blocks": [
    {
      "type": "collection",
      "name": "Collection",
      "settings": [
        {
          "type": "collection",
          "id": "collection",
          "label": "Select Collection"
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "Custom Gift Box",
      "blocks": [
        {
          "type": "collection"
        }
      ]
    }
  ]
}
{% endschema %}
