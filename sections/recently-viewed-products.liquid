{{ 'component-card.css' | asset_url | stylesheet_tag }}
{{ 'component-price.css' | asset_url | stylesheet_tag }}

{%- style -%}
  .section-{{ section.id }}-padding {
    padding-top: {{ section.settings.padding_top | times: 0.75 | round: 0 }}px;
    padding-bottom: {{ section.settings.padding_bottom | times: 0.75 | round: 0 }}px;
  }

  @media screen and (min-width: 750px) {
    .section-{{ section.id }}-padding {
      padding-top: {{ section.settings.padding_top }}px;
      padding-bottom: {{ section.settings.padding_bottom }}px;
    }
  }

  .recently-viewed-section {
    background-color: {{ section.settings.background_color }};
    position: relative;
    overflow: hidden;
  }

  .recently-viewed-container {
    margin: 0 auto;
  }

  .recently-viewed-header {
    text-align: left;
    margin-bottom: 40px;
  }

  .recently-viewed-title {
    font-size: 36px;
    font-weight: 600;
    color: {{ section.settings.text_color }};
    margin: 0;
    font-family: inherit;
  }

  .recently-viewed-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 10px;
    margin-bottom: 40px;
  }

  .recently-viewed-product {
    background-color: #ffffff;
    overflow: hidden;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
    transition: all 0.3s ease;
    position: relative;
    opacity: 0;
    transform: translateY(30px);
  }

  .recently-viewed-product.loaded {
    opacity: 1;
    transform: translateY(0);
  }

  .recently-viewed-product:hover {
    box-shadow: 0 8px 30px rgba(0, 0, 0, 0.12);
  }

  .recently-viewed-image-wrapper {
    position: relative;
    overflow: hidden;
    height: 350px;
    background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .recently-viewed-image-link {
    display: block;
    width: 100%;
    height: 100%;
    text-decoration: none;
    position: relative;
  }

  .recently-viewed-image-wrapper img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.3s ease;
  }

  .recently-viewed-product:hover .recently-viewed-image-wrapper img {
    transform: scale(1.05);
  }

  .recently-viewed-badge {
    position: absolute;
    top: 15px;
    right: 15px;
    background: linear-gradient(135deg, #1c5d1c 0%, #77ff0d 100%);
    color: white;
    padding: 6px 12px;
    border-radius: 20px;
    font-size: 12px;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    z-index: 2;
  }

  /* + Button Overlay - Always Visible */
  .recently-viewed-add-to-cart-overlay {
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    background: linear-gradient(transparent, rgba(0, 0, 0, 0.8));
    padding: 0;
    transform: translateY(0);
    transition: transform 0.3s ease;
    opacity: 1;
    visibility: visible;
    z-index: 10;
    text-align: center;
  }

  .recently-viewed-button {
    padding: 11px 15px;
    background: #acacac;
    border: none;
    color: #000;
    font-size: 24px;
    font-weight: 500;
    letter-spacing: 0.5px;
    border-radius: 25px;
    cursor: pointer;
    transition: all 0.3s ease;
    text-decoration: none;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    font-family: inherit;
    gap: 8px;
    line-height: 1;
  }

  .recently-viewed-button:hover:not(:disabled) {
    background: #d5d5d5;
  }

  .recently-viewed-button:disabled {
    opacity: 0.6;
    cursor: not-allowed;
  }

  .recently-viewed-button:disabled:hover {
    transform: none;
  }

  .recently-viewed-content {
    padding: 25px;
    text-align: center;
  }

  .recently-viewed-product-title {
    font-size: 16px;
    font-weight: 500;
    color: #333;
    margin: 0 0 10px 0;
    line-height: 1.4;
    font-family: CircularXXWeb Book, sans-serif !important;
    text-decoration: none;
  }

  .recently-viewed-product-title a {
    color: inherit;
    text-decoration: none;
    display: -webkit-box;
    -webkit-line-clamp: 1 !important;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  .recently-viewed-product-title a:hover {
    color: {{ section.settings.accent_color }};
  }

  .recently-viewed-price {
    font-size: 16px;
    font-weight: 600;
    color: {{ section.settings.accent_color }};
    margin: 0;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 10px;
  }

  .price-compare {
    text-decoration: line-through;
    color: #999;
    font-weight: 400;
  }

  .recently-viewed-form {
    width: 100%;
  }

  .recently-viewed-loading {
    text-align: center;
    padding: 60px 20px;
    color: #666;
    font-size: 16px;
  }

  .recently-viewed-empty {
    text-align: center;
    padding: 60px 20px;
    color: #666;
    font-size: 16px;
  }

  @media screen and (max-width: 1024px) {
    .recently-viewed-grid {
      grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
      gap: 10px;
    }
  }

 @media screen and (max-width: 768px) {
  .recently-viewed-container {
    padding: 0 15px;
  }
  
  .recently-viewed-header {
    margin-bottom: 30px;
  }
  
  .recently-viewed-title {
    font-size: 28px;
  }
  
  .recently-viewed-grid {
    display: flex;
    flex-direction: row;
    overflow-x: auto;
    gap: 10px;
    margin-bottom: 20px;
    padding-bottom: 10px;
    scroll-behavior: smooth;
    -webkit-overflow-scrolling: touch;
  }
  
  .recently-viewed-grid::-webkit-scrollbar {
    height: 6px;
  }
  
  .recently-viewed-grid::-webkit-scrollbar-track {
    background: #f1f1f1;
    border-radius: 3px;
  }
  
  .recently-viewed-grid::-webkit-scrollbar-thumb {
    background: #c1c1c1;
    border-radius: 3px;
  }
  
  .recently-viewed-grid::-webkit-scrollbar-thumb:hover {
    background: #a8a8a8;
  }
  
  .recently-viewed-product {
    flex: 0 0 280px;
    min-width: 280px;
  }
  
  .recently-viewed-image-wrapper {
    height: 280px;
  }
   
  .recently-viewed-content {
    padding: 20px;
  }
  
  .recently-viewed-product:hover {
    transform: translateY(-4px);
  }

  /* Button always visible on mobile */
  .recently-viewed-add-to-cart-overlay {
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    background: linear-gradient(transparent, rgba(0, 0, 0, 0.8));
    padding: 0;
    transform: translateY(0);
    opacity: 1;
    visibility: visible;
    z-index: 10;
    transition: all 0.3s ease;
    text-align: center;
  }

  /* Optional: Add a subtle animation on mobile tap */
  .recently-viewed-product:active .recently-viewed-add-to-cart-overlay {
    background: linear-gradient(transparent, rgba(0, 0, 0, 0.9));
  }
}

@media screen and (max-width: 480px) {
  .recently-viewed-product {
    flex: 0 0 260px;
    min-width: 260px;
  }
  
  .recently-viewed-image-wrapper {
    height: 260px;
  }
  
  .recently-viewed-content {
    padding: 15px;
  }
  
  .recently-viewed-title {
    font-size: 24px;
  }

  /* Ensure button is always visible on small screens */
  .recently-viewed-add-to-cart-overlay {
    padding: 0;
  }
   
  .recently-viewed-button {
    font-size: 20px;
    padding: 12px 15px;
  }
}

/* Button always visible on touch devices */
@media (hover: none) and (pointer: coarse) {
  .recently-viewed-add-to-cart-overlay {
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    background: linear-gradient(transparent, rgba(0, 0, 0, 0.8));
    padding: 0;
    transform: translateY(0);
    opacity: 1;
    visibility: visible;
    z-index: 10;
    text-align: center;
  }
  
  /* Add tap feedback for touch devices */
  .recently-viewed-product:active {
    transform: translateY(-2px);
  }
  
  .recently-viewed-product:active .recently-viewed-add-to-cart-overlay {
    background: linear-gradient(transparent, rgba(0, 0, 0, 0.9));
  }
}
{%- endstyle -%}


<div class="recently-viewed-section section-{{ section.id }}-padding">
  <div class="page-width recently-viewed-container">
    {% if section.settings.show_title %}
      <div class="recently-viewed-header">
        <h2 class="recently-viewed-title">
          {{ section.settings.title }}
        </h2>
      </div>
    {% endif %}
    
    <div class="recently-viewed-grid" id="recently-viewed-grid">
      <div class="recently-viewed-loading">Loading products...</div>
    </div>
  </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
  // Configuration
  const PRODUCTS_TO_SHOW = {{ section.settings.products_to_show }};
  
  // Selected products data
  const selectedProducts = [
    {% for product in section.settings.selected_products %}
      {
        id: {{ product.id }},
        title: {{ product.title | json }},
        url: {{ product.url | json }},
        price: {{ product.price | json }},
        compare_at_price: {{ product.compare_at_price | json }},
        available: {{ product.available | json }},
        featured_image: {% if product.featured_image %}{{ product.featured_image | image_url: width: 600, height: 600 | json }}{% else %}null{% endif %},
        variants: [
          {% for variant in product.variants %}
            {
              id: {{ variant.id }},
              available: {{ variant.available | json }},
              price: {{ variant.price | json }}
            }{% unless forloop.last %},{% endunless %}
          {% endfor %}
        ]
      }{% unless forloop.last %},{% endunless %}
    {% endfor %}
  ];

  console.log('Selected products:', selectedProducts);

  function shuffleArray(array) {
    const shuffled = [...array];
    for (let i = shuffled.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];
    }
    return shuffled;
  }

  function formatPrice(price) {
    // Format price with ৳ symbol instead of currency code
    const formattedAmount = new Intl.NumberFormat('en-US', {
      minimumFractionDigits: 0,
      maximumFractionDigits: 0
    }).format(price / 100);
    
    return `৳${formattedAmount}`;
  }

  function createProductCard(product) {
    const isOnSale = product.compare_at_price && product.compare_at_price > product.price;
    const imageUrl = product.featured_image || '{{ "product-placeholder.svg" | asset_url }}';
    
    return `
      <div class="recently-viewed-product">
        <div class="recently-viewed-image-wrapper">
          <a href="${product.url}" class="recently-viewed-image-link">
            ${isOnSale ? '<div class="recently-viewed-badge"></div>' : ''}
            <img src="${imageUrl}" 
                 alt="${product.title}" 
                 loading="lazy"
                 onerror="this.src='{{ "product-placeholder.svg" | asset_url }}'">
          </a>
          
          <div class="recently-viewed-add-to-cart-overlay">
            ${createProductButton(product)}
          </div>
        </div>
        
        <div class="recently-viewed-content">
          <h3 class="recently-viewed-product-title">
            <a href="${product.url}">${product.title}</a>
          </h3>
          <div class="recently-viewed-price">
            ${isOnSale ? `<span class="price-compare">${formatPrice(product.compare_at_price)}</span>` : ''}
            <span>${formatPrice(product.price)}</span>
          </div>
        </div>
      </div>
    `;
  }

  function createProductButton(product) {
  if (!product.available) {
    return '<button class="recently-viewed-button" disabled><span class="cart-btn-text">{{ section.settings.sold_out_text | default: "Sold Out" }}</span></button>';
  }

  if (product.variants.length > 1) {
    // Changed from just "+" to use the same button text and structure
    return `<a href="${product.url}" class="recently-viewed-button"><span class="cart-btn-text">{{ section.settings.add_to_cart_text | default: "+" }}</span></a>`;
  }

  const firstAvailableVariant = product.variants.find(v => v.available);
  if (!firstAvailableVariant) {
    return '<button class="recently-viewed-button" disabled><span class="cart-btn-text">{{ section.settings.sold_out_text | default: "Sold Out" }}</span></button>';
  }

  return `
    <button class="recently-viewed-button recently-viewed-add-to-cart-btn" 
            data-product-id="${product.id}"
            data-variant-id="${firstAvailableVariant.id}">
      <span class="cart-btn-text">{{ section.settings.add_to_cart_text | default: "+" }}</span>
    </button>
  `;
}

  function displayRandomProducts() {
    const grid = document.getElementById('recently-viewed-grid');
    if (!grid) {
      console.error('Grid element not found');
      return;
    }

    if (selectedProducts.length === 0) {
      grid.innerHTML = '<div class="recently-viewed-empty">No products selected. Please add products in the theme editor.</div>';
      return;
    }

    const shuffled = shuffleArray(selectedProducts);
    const productsToShow = shuffled.slice(0, Math.min(PRODUCTS_TO_SHOW, shuffled.length));
    
    console.log('Displaying products:', productsToShow);
    
    grid.innerHTML = productsToShow.map(product => createProductCard(product)).join('');
    
    // Trigger animation
    setTimeout(() => {
      const products = grid.querySelectorAll('.recently-viewed-product');
      products.forEach((product, index) => {
        setTimeout(() => {
          product.classList.add('loaded');
        }, index * 100);
      });
    }, 50);
    
    // Add event listeners to cart buttons
    addCartEventListeners();
  }

  // + function
  function addCartEventListeners() {
    const addToCartButtons = document.querySelectorAll('.recently-viewed-add-to-cart-btn');
    
    addToCartButtons.forEach((button) => {
      button.addEventListener('click', (e) => {
        e.preventDefault();
        e.stopPropagation();
        
        if (button.disabled) return;
        
        const variantId = button.getAttribute('data-variant-id');
        const originalText = button.querySelector('.cart-btn-text').textContent;
        
        // Show loading state
        button.disabled = true;
        button.querySelector('.cart-btn-text').textContent = 'Adding...';
        
        fetch('/cart/add.js', {
          method: 'POST',
          headers: { 
            'Content-Type': 'application/json',
            'Accept': 'application/json'
          },
          body: JSON.stringify({
            id: variantId,
            quantity: 1
          })
        })
        .then((response) => {
          if (!response.ok) {
            throw new Error('Network response was not ok');
          }
          return response.json();
        })
        .then((data) => {
          // Show success state
          button.querySelector('.cart-btn-text').textContent = 'Added!';
          
          // Update cart count if exists
          const cartCount = document.querySelector('.cart-count, [data-cart-count]');
          if (cartCount) {
            fetch('/cart.js')
              .then(response => response.json())
              .then(cart => {
                cartCount.textContent = cart.item_count;
              });
          }
          
          // Update cart drawer if exists
          const cartDrawer = document.querySelector('cart-drawer');
          if (cartDrawer) {
            cartDrawer.classList.remove('is-empty');
            fetch('/cart?view=drawer')
              .then(response => response.text())
              .then(html => {
                const tempDiv = document.createElement('div');
                tempDiv.innerHTML = html;
                const newDrawerContent = tempDiv.querySelector('#CartDrawer');
                if (newDrawerContent && document.querySelector('#CartDrawer')) {
                  document.querySelector('#CartDrawer').innerHTML = newDrawerContent.innerHTML;
                  if (typeof cartDrawer.open === 'function') {
                    cartDrawer.open();
                  }
                }
              });
          }
          
          // Reset button after 2 seconds
          setTimeout(() => {
            button.querySelector('.cart-btn-text').textContent = originalText;
            button.disabled = false;
          }, 2000);
        })
        .catch((error) => {
          console.error('Error adding product to cart:', error);
          button.querySelector('.cart-btn-text').textContent = 'Error';
          setTimeout(() => {
            button.querySelector('.cart-btn-text').textContent = originalText;
            button.disabled = false;
          }, 2000);
        });
      });
    });
  }

  // Initialize the section
  displayRandomProducts();
  
  // Optional: Auto-refresh products every 30 seconds (remove if not needed)
  {% if section.settings.auto_refresh %}
    setInterval(displayRandomProducts, 30000);
  {% endif %}
});
</script>

{% schema %}
{
  "name": "Recently Viewed Products",
  "tag": "section",
  "class": "section",
  "settings": [
    {
      "type": "checkbox",
      "id": "show_title",
      "default": true,
      "label": "Show section title"
    },
    {
      "type": "inline_richtext",
      "id": "title",
      "default": "Recently Viewed",
      "label": "Section title"
    },
    {
      "type": "range",
      "id": "products_to_show",
      "min": 2,
      "max": 20,
      "step": 1,
      "default": 4,
      "label": "Products to show"
    },
    {
      "type": "product_list",
      "id": "selected_products",
      "label": "Select products",
      "info": "Select up to 20 products. Random products will be displayed on each page load.",
      "limit": 40
    },
    {
      "type": "header",
      "content": "Button Settings"
    },
    {
      "type": "text",
      "id": "add_to_cart_text",
      "label": "+ button text",
      "default": "+"
    },
    {
      "type": "text",
      "id": "sold_out_text",
      "label": "Sold out button text",
      "default": "Sold Out"
    },
    {
      "type": "header",
      "content": "Colors"
    },
    {
      "type": "color",
      "id": "background_color",
      "default": "#f8f9fa",
      "label": "Background color"
    },
    {
      "type": "color",
      "id": "text_color",
      "default": "#333333",
      "label": "Text color"
    },
    {
      "type": "color",
      "id": "accent_color",
      "default": "#2c5aa0",
      "label": "Accent color"
    },
    {
      "type": "header",
      "content": "Advanced Options"
    },
    {
      "type": "checkbox",
      "id": "auto_refresh",
      "default": false,
      "label": "Auto-refresh products",
      "info": "Automatically change products every 30 seconds"
    },
    {
      "type": "header",
      "content": "Section padding"
    },
    {
      "type": "range",
      "id": "padding_top",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "Top padding",
      "default": 60
    },
    {
      "type": "range",
      "id": "padding_bottom",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "Bottom padding",
      "default": 60
    }
  ],
  "presets": [
    {
      "name": "Recently Viewed Products"
    }
  ]
}
{% endschema %}